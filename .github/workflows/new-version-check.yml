name: New version check

on:
  # enable manual trigger
  workflow_dispatch:
  # run every 6 hours
  schedule:
    - cron: '48 */6 * * *'
  
jobs:
  check:
    # do not run in forks
    if: github.repository == 'PF4Public/tmp'
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest Linux version
        id: latest-version
        run: echo "::set-output name=version::96.0.4664.110"
      #  run: echo "::set-output name=version::$( curl -s https://omahaproxy.appspot.com/linux )"
      - uses: actions/checkout@v2
      #- name: Create Issue
      #  uses: dblock/create-a-github-issue@v3
      #  id: create-issue
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    VERSION: ${{ steps.latest-version.outputs.version }}
      #  with:
      #    update_existing: false
      #    search_existing: all
      #    filename:  .github/ISSUE_TEMPLATE/create-an--updating-to-chromium-x-x-x-x-.md
      - name: Minor?
        #if: contains(steps.create-issue.outputs.status, 'created')
        id: major
        run: |
          echo -n "::set-output name=current::"
          cut -f 1 -d . chromium_version.txt
          echo -n "::set-output name=new::"
          echo "${{ steps.latest-version.outputs.version }}" | cut -f 1 -d .
      #- run: 'echo current: ${{ steps.major.outputs.current }}'
      #- run: 'echo new: ${{ steps.major.outputs.new }}'
      - name: Install quilt
        #if: contains(steps.create-issue.outputs.status, 'created') && steps.major.outputs.current == steps.major.outputs.new
        run: sudo apt-get install -y quilt
      - name: Attempt to automatically update patches and lists
        #if: contains(steps.create-issue.outputs.status, 'created') && steps.major.outputs.current == steps.major.outputs.new
        id: updating
        shell: /bin/bash {0}
        run: |
          echo "${{ steps.latest-version.outputs.version }}" > chromium_version.txt
          trap '' PIPE
          echo "AWK"
          cat chromium_version.txt | awk '{exit}'
          echo "true"
          cat chromium_version.txt | true
          mkdir -p build/download_cache
          ./utils/downloads.py retrieve -i downloads.ini -c build/download_cache
          ./utils/downloads.py unpack -i downloads.ini -c build/download_cache build/src
          #./devutils/update_lists.py -t build/src
          source devutils/set_quilt_vars.sh
          alias sed=/usr/bin/sed
          sudo sed -i 's/cat_file "$prev_patch_file" | patch_header/patch_header "$prev_patch_file"' /usr/share/quilt/refresh
          cat /usr/share/quilt/refresh
          exit 0
          cd build/src
          quilt push -a -v --refresh
          export RETVAL=$?
          echo -n "::set-output name=retval::$RETVAL"
          if [ "$RETVAL" -gt "0" ]; then echo "quilt push FAILED"; exit 0; fi;
          quilt pop -a -v
          export RETVAL=$?
          echo -n "::set-output name=retval::$RETVAL"
          if [ "$RETVAL" -gt "0" ]; then echo "quilt pop FAILED"; exit 0; fi;
          cd ../..
          devutils/validate_config.py
          export RETVAL=$?
          echo -n "::set-output name=retval::$RETVAL"
          if [ "$RETVAL" -gt "0" ]; then echo "validate_config FAILED"; exit 0; fi;
          devutils/validate_patches.py -l build/src
          export RETVAL=$?
          echo -n "::set-output name=retval::$RETVAL"
          if [ "$RETVAL" -gt "0" ]; then echo "validate_patches FAILED"; exit 0; fi;
      - name: Create a PR
        #if: contains(steps.create-issue.outputs.status, 'created') && steps.updating.outputs.retval == 0
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: blabla version ${{ steps.latest-version.outputs.version }}
          title: blabla version ${{ steps.latest-version.outputs.version }}
          body: "Closes #${{ steps.create-issue.outputs.number }}"
          labels: update
          delete-branch: true
        
          
